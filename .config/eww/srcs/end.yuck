;; Notifications
(defvar end-notifications '')
(defvar end-history '')
(defvar end-binary "~/.cargo/bin/end-rs") 
(defvar reply-vis false)
(defvar reply-text "")

(defwindow notification-frame
  :monitor 0
  :geometry (geometry 
    :x "0px"
    :y "0px"
    :width "480px"
    :height "0px"
    :anchor "top right")
  :stacking "fg"
  :windowtype "dialog"
  :passthrough true
  :wm-ignore true
  (literal :content end-notifications))

(defwindow history-frame
  :monitor 0
  :css getcss
  :class "end-history-frame"
  :geometry (geometry 
   :x "0px"
   :y "0px"
   :width "480px"
   :height "150px"
   :anchor "top right")
  :stacking "fg"
  :windowtype "dialog"
  :passthrough true
  :wm-ignore true
  (scroll :hscroll false :vscroll true (literal :content end-history)))


(defwidget end-notification[notification]
  (eventbox
    :onclick "${end-binary} close ${notification.id}"
    :valign "start"
    :height 100
    (box
      :css getcss
      :class "end-default-notification-box"
      :orientation "horizontal"
      :space-evenly false
      (image
        :path {notification.icon}; end sets this property if the notification contains an image
        :image-width 100
        :image-height 100
      )
      (box
        :css getcss
        :class "content-box"
        :valign "start"
        :orientation "vertical"
        :space-evenly "false"
        (label 
          :css getcss
          :class "notification-text notification-title"
          :valign "start"
          :yalign 0
          :xalign 0
          :text {notification.summary})
        (label
          :css getcss
          :class "notification-text notification-content"
          :valign "start"
          :yalign 0
          :xalign 0
          :vexpand true
          :wrap true
          :text {notification.body}))
      ;; (box
      ;;   :css getcss
      ;;   :class "end-notification-reply"
      ;;   :orientation "horizontal"
      ;;   :space-evenly false
      ;;   (input
      ;;     :value reply-text
      ;;     :onchange "${EWW_CMD} update reply-text={}"))
      (box
        :css getcss
        :class "end-notification-buttons"
        :orientation "horizontal"
        :space-evenly false
        :valign "end"
        :vexpand false
        (for action in {notification.actions}
          (button
            :css getcss
            :class "end-notification-button"
            :onclick "${end-binary} action ${notification.id} ${action.id}"
            :vexpand false
            {action.text}))
        ))))

(defwidget end-history-list[history]
  (eventbox
    :onclick "${end-binary} history close"
    :height 50
    (box
      :css getcss
      :class "end-history-box"
      :orientation "horizontal"
      :space-evenly false
      :geometry (geometry :width "100%" :height "50px")
      (image
        :path {history.icon}; end sets this property if the notification contains an image
        :image-width 50
        :image-height 50
      )
      (box
        :css getcss
        :class "content-box"
        :orientation "vertical"
        :space-evenly false
        (label 
          :css getcss
          :class "notification-text notification-title"
          :yalign 1
          :xalign 0
          :text {history.summary})
        (label
          :css getcss
          :class "notification-text notification-content"
          :yalign 1
          :xalign 0
          :wrap true
          :text {history.body})))))
